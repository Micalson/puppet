//auto generate!
static const char* ball430_frag = 
                             "#version 430 core\n"
                             "\n"
                             "out vec4 fragment_color;\n"
                             "\n"
                             "in vec3 view_direction;\n"
                             "in vec3 normal;\n"
                             "\n"
                             "uniform vec4 front_ambient = vec4(0.7, 0.7, 0.7, 1.0);\n"
                             "uniform vec4 front_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_ambient = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 specular = vec4(0.5, 0.5, 0.5, 1.0);\n"
                             "uniform float specular_power = 128.0;\n"
                             "uniform vec3 light_direction = vec3(0.0, 0.0, 1.0);\n"
                             "uniform float color_shading = 1.0;\n"
                             "\n"
                             "uniform vec4 color = vec4(0.0, 1.0, 0.0, 1.0);\n"
                             "void main( void )\n"
                             "{\n"
                             "	vec4 core_color = color;\n"
                             "	vec3 flight_direction = normalize(light_direction);\n"
                             "	vec3 fnormal 		  =	normalize(normal);\n"
                             "	vec4 ambient_color 	  = front_ambient;\n"
                             "	vec4 diffuse_color    = front_diffuse;\n"
                             "	vec4 specular_color   = specular;\n"
                             "	\n"
                             "	if(!gl_FrontFacing)\n"
                             "	{\n"
                             "		fnormal.z  = - fnormal.z;\n"
                             "		ambient_color = back_ambient;\n"
                             "		diffuse_color = back_diffuse;\n"
                             "		specular_color = vec4(0.0, 0.0, 0.0, 1.0);\n"
                             "	    \n"
                             "		core_color = vec4(0.6, 0.6, 0.6, 1.0);\n"
                             "	}\n"
                             "	else if (color_shading == 0.0) \n"
                             "	{\n"
                             "		core_color = vec4(1.0, 1.0, 1.0, 1.0);\n"
                             "		ambient_color = vec4(0.2, 0.2, 0.2, 1.0);\n"
                             "		diffuse_color = vec4(0.75, 0.75, 0.75, 1.0);\n"
                             "		specular_color *= 0.2;\n"
                             "	}\n"
                             "	\n"
                             "	float NdotL 		  = dot(fnormal, flight_direction);\n"
                             "	ambient_color 		  = ambient_color * core_color;\n"
                             "	diffuse_color         = diffuse_color * core_color;\n"
                             "	vec3 freflection      = normalize(((2.0 * fnormal) * NdotL) - flight_direction);\n"
                             "	vec3 fview_direction  = normalize(view_direction);\n"
                             "	float RdotV           = max(0.0, dot(freflection, fview_direction)); \n"
                             "	vec4 total_diffuse    = NdotL * diffuse_color;\n"
                             "	vec4 total_specular   = specular_color * pow( RdotV, 70.0);\n"
                             "	core_color = ambient_color + total_diffuse + total_specular;\n"
                             "	fragment_color = vec4(core_color.rgb, color.a);\n"
                             "}\n"
;
static const char* ball430_vert = 
                             "#version 430 core\n"
                             "\n"
                             "layout(location = 0) in vec3 ver_attribute_position;\n"
                             "layout(location = 1) in vec3 ver_attribute_normal;\n"
                             "\n"
                             "uniform mat4 model_matrix;\n"
                             "uniform mat4 view_matrix;\n"
                             "uniform mat4 projection_matrix;\n"
                             "\n"
                             "uniform mat4 position_matrix;\n"
                             "\n"
                             "out vec3 view_direction;\n"
                             "out vec3 normal;\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	mat4 modelview_matrix = view_matrix * model_matrix;\n"
                             "	vec4 world_position =  modelview_matrix * position_matrix * vec4(ver_attribute_position, 1.0);\n"
                             "    gl_Position = projection_matrix *  world_position;\n"
                             "	\n"
                             "	view_direction  = normalize(vec3(-world_position));\n"
                             "    normal          = mat3(modelview_matrix) * ver_attribute_normal;\n"
                             "}\n"
;
static const char* clip430_frag = 
                             "#version 430 core\n"
                             "\n"
                             "out vec4 fragment_color;\n"
                             "\n"
                             "in vec3 view_direction;\n"
                             "in vec3 normal;\n"
                             "in vec4 o_color;\n"
                             "uniform vec4 color = vec4(1.0, 1.0, 1.0, 1.0);\n"
                             "\n"
                             "uniform vec4 front_ambient = vec4(0.7, 0.7, 0.7, 1.0);\n"
                             "uniform vec4 front_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_ambient = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 specular = vec4(0.5, 0.5, 0.5, 1.0);\n"
                             "uniform float specular_power = 128.0;\n"
                             "uniform vec3 light_direction = vec3(0.0, 0.0, 1.0);\n"
                             "uniform float color_shading = 1.0;\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	vec4 core_color = color;\n"
                             "	//core_color = o_color;\n"
                             "	\n"
                             "	vec3 flight_direction = normalize(light_direction);\n"
                             "	vec3 fnormal 		  =	normalize(normal);\n"
                             "	vec4 ambient_color 	  = front_ambient;\n"
                             "	vec4 diffuse_color    = front_diffuse;\n"
                             "	vec4 specular_color   = specular;\n"
                             "	\n"
                             "	float NdotL 		  = dot(fnormal, flight_direction);\n"
                             "	ambient_color 		  = ambient_color * core_color;\n"
                             "	diffuse_color         = diffuse_color * core_color;\n"
                             "	vec3 freflection      = normalize(((2.0 * fnormal) * NdotL) - flight_direction);\n"
                             "	vec3 fview_direction  = normalize(view_direction);\n"
                             "	float RdotV           = max(0.0, dot(freflection, fview_direction)); \n"
                             "	vec4 total_diffuse    = NdotL * diffuse_color;\n"
                             "	vec4 total_specular   = specular_color * pow( RdotV, 70.0);\n"
                             "	core_color = ambient_color + total_diffuse + total_specular;\n"
                             "	fragment_color = vec4(core_color.rgb, color.a);\n"
                             "}\n"
;
static const char* clip430_vert = 
                             "#version 430 core\n"
                             "\n"
                             "layout(location = 0) in vec3 ver_attribute_position;\n"
                             "layout(location = 1) in vec3 ver_attribute_normal;\n"
                             "\n"
                             "uniform mat4 model_matrix;\n"
                             "uniform mat4 view_matrix;\n"
                             "uniform mat4 projection_matrix;\n"
                             "\n"
                             "uniform float use_clip;\n"
                             "uniform vec3 center;\n"
                             "\n"
                             "out vec3 view_direction;\n"
                             "out vec3 normal;\n"
                             "out vec4 o_color;\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	mat4 modelview_matrix = view_matrix * model_matrix;\n"
                             "	vec4 world_position = modelview_matrix * vec4(ver_attribute_position, 1.0);\n"
                             "	\n"
                             "	view_direction  = normalize(vec3(-world_position));\n"
                             "    normal          = mat3(modelview_matrix) * ver_attribute_normal;\n"
                             "	\n"
                             "	gl_Position = projection_matrix *  world_position;\n"
                             "\n"
                             "}\n"
;
static const char* cmd430_frag = 
                             "#version 430 core\n"
                             "\n"
                             "out vec4 frag_color;\n"
                             "\n"
                             "in vec2 tex_coord;\n"
                             "\n"
                             "uniform sampler2D tex;\n"
                             "void main()\n"
                             "{	\n"
                             "	vec4 color = vec4(1.0, 1.0, 1.0, 1.0);\n"
                             "	if(tex_coord.x < 0.0 || tex_coord.y < 0.0)\n"
                             "		frag_color = vec4(0.0, 0.0, 0.0, 0.0);\n"
                             "	else\n"
                             "		frag_color = color * texture(tex, tex_coord).r;\n"
                             "}\n"
;
static const char* cmd430_vert = 
                             "#version 430 core\n"
                             "\n"
                             "layout(location = 0) in vec3 ver_attribute_position;\n"
                             "layout(location = 1) in vec2 ver_attribute_texcoord;\n"
                             "\n"
                             "uniform mat4 model_matrix;\n"
                             "uniform mat4 view_matrix;\n"
                             "uniform mat4 projection_matrix;\n"
                             "\n"
                             "out vec2 tex_coord;\n"
                             "void main()\n"
                             "{\n"
                             "	mat4 modelview_matrix = view_matrix * model_matrix;\n"
                             "	vec4 world_position =  modelview_matrix * vec4(ver_attribute_position, 1.0);\n"
                             "    gl_Position = projection_matrix *  world_position;\n"
                             "	\n"
                             "	tex_coord = ver_attribute_texcoord;\n"
                             "}\n"
;
static const char* color430_frag = 
                             "#version 430 core\n"
                             "\n"
                             "out vec4 fragment_color;\n"
                             "\n"
                             "in vec4 color;\n"
                             "\n"
                             "void main()\n"
                             "{\n"
                             "	fragment_color = color;\n"
                             "}\n"
;
static const char* color430_vert = 
                             "#version 430 core\n"
                             "\n"
                             "layout(location = 0) in vec3 ver_attribute_position;\n"
                             "layout(location = 1) in vec4 ver_attribute_color;\n"
                             "\n"
                             "uniform mat4 model_matrix;\n"
                             "uniform mat4 view_matrix;\n"
                             "uniform mat4 projection_matrix;\n"
                             "\n"
                             "out vec4 color;\n"
                             "void main()\n"
                             "{\n"
                             "	gl_Position = projection_matrix * view_matrix * model_matrix * vec4(ver_attribute_position, 1.0);\n"
                             "	color = ver_attribute_color;\n"
                             "}\n"
;
static const char* curvature430_frag = 
                             "#version 430 core\n"
                             "\n"
                             "out vec4 fragment_color;\n"
                             "\n"
                             "in vec3 view_direction;\n"
                             "in vec3 normal;\n"
                             "in vec4 color;\n"
                             "\n"
                             "uniform vec4 front_ambient = vec4(0.7, 0.7, 0.7, 1.0);\n"
                             "uniform vec4 front_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_ambient = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 specular = vec4(0.5, 0.5, 0.5, 1.0);\n"
                             "uniform float specular_power = 128.0;\n"
                             "uniform vec3 light_direction = vec3(0.0, 0.0, 1.0);\n"
                             "uniform float color_shading = 1.0;\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	vec4 core_color = color;\n"
                             "	vec3 flight_direction = normalize(light_direction);\n"
                             "	vec3 fnormal 		  =	normalize(normal);\n"
                             "	vec4 ambient_color 	  = front_ambient;\n"
                             "	vec4 diffuse_color    = front_diffuse;\n"
                             "	vec4 specular_color   = specular;\n"
                             "	\n"
                             "	if(!gl_FrontFacing)\n"
                             "	{\n"
                             "		fnormal.z  = - fnormal.z;\n"
                             "		ambient_color = back_ambient;\n"
                             "		diffuse_color = back_diffuse;\n"
                             "		specular_color = vec4(0.0, 0.0, 0.0, 1.0);\n"
                             "	    \n"
                             "		core_color = vec4(0.6, 0.6, 0.6, 1.0);\n"
                             "	}\n"
                             "	else if (color_shading == 0.0) \n"
                             "	{\n"
                             "		core_color = vec4(1.0, 1.0, 1.0, 1.0);\n"
                             "		ambient_color = vec4(0.2, 0.2, 0.2, 1.0);\n"
                             "		diffuse_color = vec4(0.75, 0.75, 0.75, 1.0);\n"
                             "		specular_color *= 0.2;\n"
                             "	}\n"
                             "	\n"
                             "	float NdotL 		  = dot(fnormal, flight_direction);\n"
                             "	ambient_color 		  = ambient_color * core_color;\n"
                             "	diffuse_color         = diffuse_color * core_color;\n"
                             "	vec3 freflection      = normalize(((2.0 * fnormal) * NdotL) - flight_direction);\n"
                             "	vec3 fview_direction  = normalize(view_direction);\n"
                             "	float RdotV           = max(0.0, dot(freflection, fview_direction)); \n"
                             "	vec4 total_diffuse    = NdotL * diffuse_color;\n"
                             "	vec4 total_specular   = specular_color * pow( RdotV, 70.0);\n"
                             "	core_color = ambient_color + total_diffuse + total_specular;\n"
                             "	fragment_color = vec4(core_color.rgb, color.a);\n"
                             "}\n"
;
static const char* curvature430_vert = 
                             "#version 430 core\n"
                             "\n"
                             "layout(location = 0) in vec3 ver_attribute_position;\n"
                             "layout(location = 1) in vec3 ver_attribute_normal;\n"
                             "layout(location = 2) in vec4 ver_attribute_color;\n"
                             "layout(location = 3) in float ver_attribute_curvature;\n"
                             "\n"
                             "uniform mat4 model_matrix;\n"
                             "uniform mat4 view_matrix;\n"
                             "uniform mat4 projection_matrix;\n"
                             "\n"
                             "out vec3 view_direction;\n"
                             "out vec3 normal;\n"
                             "out vec4 color;\n"
                             "\n"
                             "vec4 curvature_to_color(float curvature)\n"
                             "{\n"
                             "	vec4 n_color = vec4(0.0, 0.0, 1.0, 1.0);\n"
                             "	vec4 p_color = vec4(1.0, 0.0, 0.0, 1.0);\n"
                             "	\n"
                             "	float max_c = 0.5;\n"
                             "	if(curvature <= -max_c)\n"
                             "		return n_color;\n"
                             "	else if(curvature >= max_c)\n"
                             "		return p_color;\n"
                             "	else\n"
                             "	{\n"
                             "		vec4 c1 = vec4(0.0, 1.0, 0.0, 1.0);\n"
                             "		vec4 c2 = n_color;\n"
                             "		if(curvature >= 0.0) c2 = p_color;\n"
                             "		\n"
                             "		float delta = abs(curvature) / max_c;\n"
                             "		return c1 * ( 1.0 - delta) + c2 * delta;\n"
                             "	}\n"
                             "}\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	mat4 modelview_matrix = view_matrix * model_matrix;\n"
                             "	vec4 world_position = modelview_matrix * vec4(ver_attribute_position, 1.0);\n"
                             "    gl_Position = projection_matrix *  world_position;\n"
                             "	\n"
                             "	view_direction  = normalize(vec3(-world_position));\n"
                             "    normal          = mat3(modelview_matrix) * ver_attribute_normal;\n"
                             "	\n"
                             "	color =  curvature_to_color(ver_attribute_curvature);\n"
                             "}\n"
;
static const char* curvature430_ex_frag = 
                             "#version 430 core\n"
                             "\n"
                             "out vec4 fragment_color;\n"
                             "\n"
                             "in vec3 view_direction;\n"
                             "in vec3 normal;\n"
                             "in vec4 color;\n"
                             "\n"
                             "uniform vec4 front_ambient = vec4(0.7, 0.7, 0.7, 1.0);\n"
                             "uniform vec4 front_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_ambient = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 specular = vec4(0.5, 0.5, 0.5, 1.0);\n"
                             "uniform float specular_power = 128.0;\n"
                             "uniform vec3 light_direction = vec3(0.0, 0.0, 1.0);\n"
                             "uniform float color_shading = 1.0;\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	vec4 core_color = color;\n"
                             "	vec3 flight_direction = normalize(light_direction);\n"
                             "	vec3 fnormal 		  =	normalize(normal);\n"
                             "	vec4 ambient_color 	  = front_ambient;\n"
                             "	vec4 diffuse_color    = front_diffuse;\n"
                             "	vec4 specular_color   = specular;\n"
                             "	\n"
                             "	if(!gl_FrontFacing)\n"
                             "	{\n"
                             "		fnormal.z  = - fnormal.z;\n"
                             "		ambient_color = back_ambient;\n"
                             "		diffuse_color = back_diffuse;\n"
                             "		specular_color = vec4(0.0, 0.0, 0.0, 1.0);\n"
                             "	    \n"
                             "		core_color = vec4(0.6, 0.6, 0.6, 1.0);\n"
                             "	}\n"
                             "	else if (color_shading == 0.0) \n"
                             "	{\n"
                             "		core_color = vec4(1.0, 1.0, 1.0, 1.0);\n"
                             "		ambient_color = vec4(0.2, 0.2, 0.2, 1.0);\n"
                             "		diffuse_color = vec4(0.75, 0.75, 0.75, 1.0);\n"
                             "		specular_color *= 0.2;\n"
                             "	}\n"
                             "	\n"
                             "	float NdotL 		  = dot(fnormal, flight_direction);\n"
                             "	ambient_color 		  = ambient_color * core_color;\n"
                             "	diffuse_color         = diffuse_color * core_color;\n"
                             "	vec3 freflection      = normalize(((2.0 * fnormal) * NdotL) - flight_direction);\n"
                             "	vec3 fview_direction  = normalize(view_direction);\n"
                             "	float RdotV           = max(0.0, dot(freflection, fview_direction)); \n"
                             "	vec4 total_diffuse    = NdotL * diffuse_color;\n"
                             "	vec4 total_specular   = specular_color * pow( RdotV, 70.0);\n"
                             "	core_color = ambient_color + total_diffuse + total_specular;\n"
                             "	fragment_color = vec4(core_color.rgb, color.a);\n"
                             "}\n"
;
static const char* curvature430_ex_vert = 
                             "#version 430 core\n"
                             "\n"
                             "layout(location = 0) in vec3 ver_attribute_position;\n"
                             "layout(location = 1) in vec3 ver_attribute_normal;\n"
                             "layout(location = 2) in float ver_attribute_curvature;\n"
                             "\n"
                             "uniform mat4 model_matrix;\n"
                             "uniform mat4 view_matrix;\n"
                             "uniform mat4 projection_matrix;\n"
                             "\n"
                             "out vec3 view_direction;\n"
                             "out vec3 normal;\n"
                             "out vec4 color;\n"
                             "\n"
                             "vec4 curvature_to_color(float curvature)\n"
                             "{\n"
                             "	vec4 n_color = vec4(0.0, 1.0, 1.0, 1.0);\n"
                             "	vec4 p_color = vec4(1.0, 1.0, 0.0, 1.0);\n"
                             "	\n"
                             "	float max_c = 0.5;\n"
                             "	if(curvature <= -max_c)\n"
                             "		return n_color;\n"
                             "	else if(curvature >= max_c)\n"
                             "		return p_color;\n"
                             "	else\n"
                             "	{\n"
                             "		vec4 c1 = vec4(0.0, 1.0, 0.0, 1.0);\n"
                             "		vec4 c2 = n_color;\n"
                             "		if(curvature >= 0.0) c2 = p_color;\n"
                             "		\n"
                             "		float delta = abs(curvature) / max_c;\n"
                             "		return c1 * ( 1.0 - delta) + c2 * delta;\n"
                             "	}\n"
                             "}\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	mat4 modelview_matrix = view_matrix * model_matrix;\n"
                             "	vec4 world_position = modelview_matrix * vec4(ver_attribute_position, 1.0);\n"
                             "    gl_Position = projection_matrix *  world_position;\n"
                             "	\n"
                             "	view_direction  = normalize(vec3(-world_position));\n"
                             "    normal          = mat3(modelview_matrix) * ver_attribute_normal;\n"
                             "	\n"
                             "	color =  curvature_to_color(ver_attribute_curvature);\n"
                             "}\n"
;
static const char* double_phong430_frag = 
                             "#version 430 core\n"
                             "\n"
                             "out vec4 fragment_color;\n"
                             "\n"
                             "in vec3 view_direction;\n"
                             "in vec3 normal;\n"
                             "in vec4 color;\n"
                             "\n"
                             "uniform vec4 front_ambient = vec4(0.7, 0.7, 0.7, 1.0);\n"
                             "uniform vec4 front_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_ambient = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 specular = vec4(0.5, 0.5, 0.5, 1.0);\n"
                             "uniform float specular_power = 128.0;\n"
                             "uniform vec3 light_direction = vec3(0.0, 0.0, 1.0);\n"
                             "uniform float color_shading = 1.0;\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	vec4 core_color = color;\n"
                             "	vec3 flight_direction = normalize(light_direction);\n"
                             "	vec3 fnormal 		  =	normalize(normal);\n"
                             "	vec4 ambient_color 	  = front_ambient;\n"
                             "	vec4 diffuse_color    = front_diffuse;\n"
                             "	vec4 specular_color   = specular;\n"
                             "	\n"
                             "	float NdotL 		  = dot(fnormal, flight_direction);\n"
                             "	ambient_color 		  = ambient_color * core_color;\n"
                             "	diffuse_color         = diffuse_color * core_color;\n"
                             "	vec3 freflection      = normalize(((2.0 * fnormal) * NdotL) - flight_direction);\n"
                             "	vec3 fview_direction  = normalize(view_direction);\n"
                             "	float RdotV           = max(0.0, dot(freflection, fview_direction)); \n"
                             "	vec4 total_diffuse    = NdotL * diffuse_color;\n"
                             "	vec4 total_specular   = specular_color * pow( RdotV, 70.0);\n"
                             "	core_color = ambient_color + total_diffuse + total_specular;\n"
                             "	fragment_color = vec4(core_color.rgb, color.a);\n"
                             "}\n"
;
static const char* double_phong430_vert = 
                             "#version 430 core\n"
                             "\n"
                             "layout(location = 0) in vec3 ver_attribute_position;\n"
                             "layout(location = 1) in vec3 ver_attribute_normal;\n"
                             "layout(location = 2) in vec4 ver_attribute_color;\n"
                             "uniform mat4 model_matrix;\n"
                             "uniform mat4 view_matrix;\n"
                             "uniform mat4 projection_matrix;\n"
                             "\n"
                             "out vec3 view_direction;\n"
                             "out vec3 normal;\n"
                             "out vec4 color;\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	mat4 modelview_matrix = view_matrix * model_matrix;\n"
                             "	vec4 world_position = modelview_matrix * vec4(ver_attribute_position, 1.0);\n"
                             "    gl_Position = projection_matrix *  world_position;\n"
                             "	\n"
                             "	view_direction  = normalize(vec3(-world_position));\n"
                             "    normal          = mat3(modelview_matrix) * ver_attribute_normal;\n"
                             "	color 			= ver_attribute_color;\n"
                             "}\n"
;
static const char* energycolor430_frag = 
                             "#version 430 core\n"
                             "\n"
                             "out vec4 fragment_color;\n"
                             "\n"
                             "in vec3 view_direction;\n"
                             "in vec3 normal;\n"
                             "in vec4 color;\n"
                             "\n"
                             "uniform vec4 front_ambient = vec4(0.7, 0.7, 0.7, 1.0);\n"
                             "uniform vec4 front_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_ambient = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 specular = vec4(0.5, 0.5, 0.5, 1.0);\n"
                             "uniform float specular_power = 128.0;\n"
                             "uniform vec3 light_direction = vec3(0.0, 0.0, 1.0);\n"
                             "uniform float color_shading = 1.0;\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	vec4 core_color = color;\n"
                             "	vec3 flight_direction = normalize(light_direction);\n"
                             "	vec3 fnormal 		  =	normalize(normal);\n"
                             "	vec4 ambient_color 	  = front_ambient;\n"
                             "	vec4 diffuse_color    = front_diffuse;\n"
                             "	vec4 specular_color   = specular;\n"
                             "	\n"
                             "	if(!gl_FrontFacing)\n"
                             "	{\n"
                             "		fnormal.z  = - fnormal.z;\n"
                             "		ambient_color = back_ambient;\n"
                             "		diffuse_color = back_diffuse;\n"
                             "		specular_color = vec4(0.0, 0.0, 0.0, 1.0);\n"
                             "	    \n"
                             "		core_color = vec4(0.6, 0.6, 0.6, 1.0);\n"
                             "	}\n"
                             "	else if (color_shading == 0.0) \n"
                             "	{\n"
                             "		core_color = vec4(1.0, 1.0, 1.0, 1.0);\n"
                             "		ambient_color = vec4(0.2, 0.2, 0.2, 1.0);\n"
                             "		diffuse_color = vec4(0.75, 0.75, 0.75, 1.0);\n"
                             "		specular_color *= 0.2;\n"
                             "	}\n"
                             "	\n"
                             "	float NdotL 		  = dot(fnormal, flight_direction);\n"
                             "	ambient_color 		  = ambient_color * core_color;\n"
                             "	diffuse_color         = diffuse_color * core_color;\n"
                             "	vec3 freflection      = normalize(((2.0 * fnormal) * NdotL) - flight_direction);\n"
                             "	vec3 fview_direction  = normalize(view_direction);\n"
                             "	float RdotV           = max(0.0, dot(freflection, fview_direction)); \n"
                             "	vec4 total_diffuse    = NdotL * diffuse_color;\n"
                             "	vec4 total_specular   = specular_color * pow( RdotV, 70.0);\n"
                             "	core_color = ambient_color + total_diffuse + total_specular;\n"
                             "	fragment_color = vec4(core_color.rgb, color.a);\n"
                             "}\n"
;
static const char* energycolor430_vert = 
                             "#version 430 core\n"
                             "\n"
                             "layout(location = 0) in vec3 ver_attribute_position;\n"
                             "layout(location = 1) in float ver_attribute_energy_value;\n"
                             "layout(location = 2) in vec3 ver_attribute_normal;\n"
                             "\n"
                             "uniform mat4 model_matrix;\n"
                             "uniform mat4 view_matrix;\n"
                             "uniform mat4 projection_matrix;\n"
                             "\n"
                             "out vec3 view_direction;\n"
                             "out vec3 normal;\n"
                             "out vec4 color;\n"
                             "\n"
                             "vec4 curvature_to_color(float energy)\n"
                             "{\n"
                             "	vec4 n_color = vec4(0.0, 0.0, 1.0, 1.0);\n"
                             "	vec4 m_color = vec4(0.0, 1.0, 0.0, 1.0);\n"
                             "	vec4 p_color = vec4(1.0, 0.0, 0.0, 1.0);\n"
                             "	\n"
                             "	if (energy > 1.0)\n"
                             "	{\n"
                             "		return n_color;\n"
                             "	}\n"
                             "	\n"
                             "	if (energy > 0.5)\n"
                             "	{\n"
                             "		energy = 2 * (energy - 0.5);\n"
                             "		return (1 - energy) * m_color + energy * n_color;\n"
                             "	}\n"
                             "	\n"
                             "	if (energy > 0.01)\n"
                             "	{\n"
                             "		energy = 2 * energy;\n"
                             "		return energy * m_color + (1 - energy) * p_color;\n"
                             "	}\n"
                             "	\n"
                             "	return p_color;\n"
                             "}\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	mat4 modelview_matrix = view_matrix * model_matrix;\n"
                             "	vec4 world_position = modelview_matrix * vec4(ver_attribute_position, 1.0);\n"
                             "    gl_Position = projection_matrix *  world_position;\n"
                             "	\n"
                             "	view_direction  = normalize(vec3(-world_position));\n"
                             "	normal          = mat3(modelview_matrix) * ver_attribute_normal;\n"
                             "	\n"
                             "	color = curvature_to_color(ver_attribute_energy_value);\n"
                             "	//color = vec4(1.0, 1.0, 1.0, 1.0);\n"
                             "}\n"
;
static const char* erase_render430_frag = 
                             "#version 430 core\n"
                             "\n"
                             "out vec4 fragment_color;\n"
                             "\n"
                             "in vec3 view_direction;\n"
                             "in vec3 normal;\n"
                             "in vec4 color;\n"
                             "flat in float alpha;\n"
                             "\n"
                             "uniform vec4 front_ambient = vec4(0.7, 0.7, 0.7, 1.0);\n"
                             "uniform vec4 front_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_ambient = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 specular = vec4(0.5, 0.5, 0.5, 1.0);\n"
                             "uniform float specular_power = 128.0;\n"
                             "uniform vec3 light_direction = vec3(0.0, 0.0, 1.0);\n"
                             "uniform float color_shading = 1.0;\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	if(alpha == 0.0)\n"
                             "		discard;\n"
                             "		\n"
                             "	vec4 core_color = color;\n"
                             "	vec3 flight_direction = normalize(light_direction);\n"
                             "	vec3 fnormal 		  =	normalize(normal);\n"
                             "	vec4 ambient_color 	  = front_ambient;\n"
                             "	vec4 diffuse_color    = front_diffuse;\n"
                             "	vec4 specular_color   = specular;\n"
                             "	\n"
                             "	if(!gl_FrontFacing)\n"
                             "	{\n"
                             "		fnormal.z  = - fnormal.z;\n"
                             "		ambient_color = back_ambient;\n"
                             "		diffuse_color = back_diffuse;\n"
                             "		specular_color = vec4(0.0, 0.0, 0.0, 1.0);\n"
                             "	    \n"
                             "		core_color = vec4(0.6, 0.6, 0.6, 1.0);\n"
                             "	}\n"
                             "	else if (color_shading == 0.0) \n"
                             "	{\n"
                             "		core_color = vec4(1.0, 1.0, 1.0, 1.0);\n"
                             "		ambient_color = vec4(0.2, 0.2, 0.2, 1.0);\n"
                             "		diffuse_color = vec4(0.75, 0.75, 0.75, 1.0);\n"
                             "		specular_color *= 0.2;\n"
                             "	}\n"
                             "	\n"
                             "	float NdotL 		  = dot(fnormal, flight_direction);\n"
                             "	ambient_color 		  = ambient_color * core_color;\n"
                             "	diffuse_color         = diffuse_color * core_color;\n"
                             "	vec3 freflection      = normalize(((2.0 * fnormal) * NdotL) - flight_direction);\n"
                             "	vec3 fview_direction  = normalize(view_direction);\n"
                             "	float RdotV           = max(0.0, dot(freflection, fview_direction)); \n"
                             "	vec4 total_diffuse    = NdotL * diffuse_color;\n"
                             "	vec4 total_specular   = specular_color * pow( RdotV, 70.0);\n"
                             "	core_color = ambient_color + total_diffuse + total_specular;\n"
                             "	fragment_color = vec4(core_color.rgb, color.a);\n"
                             "}\n"
;
static const char* erase_render430_vert = 
                             "#version 430 core\n"
                             "\n"
                             "layout(location = 0) in vec3 ver_attribute_position;\n"
                             "layout(location = 1) in vec3 ver_attribute_normal;\n"
                             "layout(location = 2) in vec4 ver_attribute_color;\n"
                             "layout(location = 3) in float ver_attribute_erase;\n"
                             "\n"
                             "uniform mat4 model_matrix;\n"
                             "uniform mat4 view_matrix;\n"
                             "uniform mat4 projection_matrix;\n"
                             "\n"
                             "out vec3 view_direction;\n"
                             "out vec3 normal;\n"
                             "out vec4 color;\n"
                             "\n"
                             "flat out float alpha;\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	mat4 modelview_matrix = view_matrix * model_matrix;\n"
                             "	vec4 world_position = modelview_matrix * vec4(ver_attribute_position, 1.0);\n"
                             "    gl_Position = projection_matrix *  world_position;\n"
                             "	\n"
                             "	view_direction  = normalize(vec3(-world_position));\n"
                             "    normal          = mat3(modelview_matrix) * ver_attribute_normal;\n"
                             "	\n"
                             "	color =  ver_attribute_color ;\n"
                             "		\n"
                             "	alpha = ver_attribute_erase;\n"
                             "}\n"
;
static const char* feedback_erase430_vert = 
                             "#version 430 core\n"
                             "\n"
                             "layout(location = 0) in vec3 ver_attribute_position;\n"
                             "layout(location = 3) in float ver_attribute_feedback;\n"
                             "\n"
                             "uniform mat4 model_matrix;\n"
                             "uniform mat4 view_matrix;\n"
                             "uniform mat4 projection_matrix;\n"
                             "uniform mat4 viewport_matrix;\n"
                             "\n"
                             "uniform vec2 pick_xy;\n"
                             "uniform float pick_radius = 50.0;\n"
                             "\n"
                             "out float feedback_alpha;\n"
                             "out float feedback_attribute;\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	mat4 modelview_matrix = view_matrix * model_matrix;\n"
                             "	vec4 world_position = modelview_matrix * vec4(ver_attribute_position, 1.0);\n"
                             "	\n"
                             "	vec4 screen_position = viewport_matrix * projection_matrix *  world_position;\n"
                             "	vec2 xy = vec2(screen_position.x / screen_position.w, screen_position.y / screen_position.w);\n"
                             "	vec2 delta = pick_xy - xy;\n"
                             "	\n"
                             "	feedback_alpha = ver_attribute_feedback;\n"
                             "	if(dot(delta, delta) <= pick_radius * pick_radius)\n"
                             "		feedback_alpha = 0.0;\n"
                             "		\n"
                             "	feedback_attribute = feedback_alpha; \n"
                             "}\n"
;
static const char* harmonic_ball430_frag = 
                             "#version 430 core\n"
                             "\n"
                             "out vec4 fragment_color;\n"
                             "\n"
                             "in vec3 view_direction;\n"
                             "in vec3 normal;\n"
                             "in vec4 color;\n"
                             "\n"
                             "uniform vec4 front_ambient = vec4(0.7, 0.7, 0.7, 1.0);\n"
                             "uniform vec4 front_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_ambient = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 specular = vec4(0.5, 0.5, 0.5, 1.0);\n"
                             "uniform float specular_power = 128.0;\n"
                             "uniform vec3 light_direction = vec3(0.0, 0.0, 1.0);\n"
                             "uniform float color_shading = 1.0;\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	vec4 core_color = color;\n"
                             "	vec3 flight_direction = normalize(light_direction);\n"
                             "	vec3 fnormal 		  =	normalize(normal);\n"
                             "	vec4 ambient_color 	  = front_ambient;\n"
                             "	vec4 diffuse_color    = front_diffuse;\n"
                             "	vec4 specular_color   = specular;\n"
                             "	\n"
                             "	if(!gl_FrontFacing)\n"
                             "	{\n"
                             "		fnormal.z  = - fnormal.z;\n"
                             "		ambient_color = back_ambient;\n"
                             "		diffuse_color = back_diffuse;\n"
                             "		specular_color = vec4(0.0, 0.0, 0.0, 1.0);\n"
                             "	    \n"
                             "		core_color = vec4(0.6, 0.6, 0.6, 1.0);\n"
                             "	}\n"
                             "	else if (color_shading == 0.0) \n"
                             "	{\n"
                             "		core_color = vec4(1.0, 1.0, 1.0, 1.0);\n"
                             "		ambient_color = vec4(0.2, 0.2, 0.2, 1.0);\n"
                             "		diffuse_color = vec4(0.75, 0.75, 0.75, 1.0);\n"
                             "		specular_color *= 0.2;\n"
                             "	}\n"
                             "	\n"
                             "	float NdotL 		  = dot(fnormal, flight_direction);\n"
                             "	ambient_color 		  = ambient_color * core_color;\n"
                             "	diffuse_color         = diffuse_color * core_color;\n"
                             "	vec3 freflection      = normalize(((2.0 * fnormal) * NdotL) - flight_direction);\n"
                             "	vec3 fview_direction  = normalize(view_direction);\n"
                             "	float RdotV           = max(0.0, dot(freflection, fview_direction)); \n"
                             "	vec4 total_diffuse    = NdotL * diffuse_color;\n"
                             "	vec4 total_specular   = specular_color * pow( RdotV, 70.0);\n"
                             "	core_color = ambient_color + total_diffuse + total_specular;\n"
                             "	fragment_color = vec4(core_color.rgb, color.a);\n"
                             "}\n"
;
static const char* harmonic_ball430_vert = 
                             "#version 430 core\n"
                             "\n"
                             "layout(location = 0) in vec3 ver_attribute_position;\n"
                             "layout(location = 1) in vec3 ver_attribute_normal;\n"
                             "\n"
                             "uniform mat4 model_matrix;\n"
                             "uniform mat4 view_matrix;\n"
                             "uniform mat4 projection_matrix;\n"
                             "\n"
                             "uniform mat4 scale_matrix;\n"
                             "uniform mat4 position_matrix;\n"
                             "uniform vec4 ball_color;\n"
                             "\n"
                             "out vec3 view_direction;\n"
                             "out vec3 normal;\n"
                             "out vec4 color;\n"
                             "void main( void )\n"
                             "{\n"
                             "	mat4 modelview_matrix = view_matrix * model_matrix;\n"
                             "	vec4 world_position =  modelview_matrix * position_matrix * scale_matrix * vec4(ver_attribute_position, 1.0);\n"
                             "    gl_Position = projection_matrix *  world_position;\n"
                             "	\n"
                             "	view_direction  = normalize(vec3(-world_position));\n"
                             "    normal          = mat3(modelview_matrix) * ver_attribute_normal;\n"
                             "	color 			= ball_color;\n"
                             "}\n"
;
static const char* harmonic_phong430_frag = 
                             "#version 430 core\n"
                             "\n"
                             "out vec4 fragment_color;\n"
                             "\n"
                             "in vec3 view_direction;\n"
                             "in vec3 normal;\n"
                             "in vec4 color;\n"
                             "\n"
                             "uniform vec4 front_ambient = vec4(0.5, 0.5, 0.5, 1.0);\n"
                             "uniform vec4 front_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_ambient = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 specular = vec4(0.5, 0.5, 0.5, 1.0);\n"
                             "uniform float specular_power = 128.0;\n"
                             "uniform vec3 light_direction = vec3(0.0, 0.0, 1.0);\n"
                             "uniform float color_shading = 1.0;\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	vec4 core_color = color;\n"
                             "	vec3 flight_direction = normalize(light_direction);\n"
                             "	vec3 fnormal 		  =	normalize(normal);\n"
                             "	vec4 ambient_color 	  = front_ambient;\n"
                             "	vec4 diffuse_color    = front_diffuse;\n"
                             "	vec4 specular_color   = specular;\n"
                             "	\n"
                             "	if(!gl_FrontFacing)\n"
                             "	{\n"
                             "		fnormal.z  = - fnormal.z;\n"
                             "		ambient_color = back_ambient;\n"
                             "		diffuse_color = back_diffuse;\n"
                             "		specular_color = vec4(0.0, 0.0, 0.0, 1.0);\n"
                             "	    \n"
                             "		core_color = vec4(0.6, 0.6, 0.6, 1.0);\n"
                             "	}\n"
                             "	else if (color_shading == 0.0) \n"
                             "	{\n"
                             "		core_color = vec4(1.0, 1.0, 1.0, 1.0);\n"
                             "		ambient_color = vec4(0.2, 0.2, 0.2, 1.0);\n"
                             "		diffuse_color = vec4(0.75, 0.75, 0.75, 1.0);\n"
                             "		specular_color *= 0.2;\n"
                             "	}\n"
                             "	\n"
                             "	float NdotL 		  = dot(fnormal, flight_direction);\n"
                             "	ambient_color 		  = ambient_color * core_color;\n"
                             "	diffuse_color         = diffuse_color * core_color;\n"
                             "	vec3 freflection      = normalize(((2.0 * fnormal) * NdotL) - flight_direction);\n"
                             "	vec3 fview_direction  = normalize(view_direction);\n"
                             "	float RdotV           = max(0.0, dot(freflection, fview_direction)); \n"
                             "	vec4 total_diffuse    = NdotL * diffuse_color;\n"
                             "	vec4 total_specular   = specular_color * pow( RdotV, 70.0);\n"
                             "	core_color = ambient_color + total_diffuse + total_specular;\n"
                             "	fragment_color = vec4(core_color.rgb, color.a);\n"
                             "}\n"
;
static const char* harmonic_phong430_vert = 
                             "#version 430 core\n"
                             "\n"
                             "layout(location = 0) in vec3 ver_attribute_position;\n"
                             "layout(location = 1) in vec3 ver_attribute_normal;\n"
                             "layout(location = 2) in float ver_harmonic_value;\n"
                             "\n"
                             "uniform mat4 model_matrix;\n"
                             "uniform mat4 view_matrix;\n"
                             "uniform mat4 projection_matrix;\n"
                             "\n"
                             "out vec3 view_direction;\n"
                             "out vec3 normal;\n"
                             "out vec4 color;\n"
                             "\n"
                             "vec4 harmonic_value(float value)\n"
                             "{\n"
                             "	vec4 r = vec4(1.0, 0.0, 0.0, 1.0);\n"
                             "	vec4 g = vec4(0.0, 1.0, 0.0, 1.0);\n"
                             "	vec4 b = vec4(0.0, 0.0, 1.0, 1.0);\n"
                             "	\n"
                             "	//if(value > 0.5)\n"
                             "	//{\n"
                             "	//	float l = (value - 0.5)/0.5;\n"
                             "	//	return r * l + g * ( 1.0 - l);\n"
                             "	//}else\n"
                             "	//{\n"
                             "	//	float l = (0.5 - value)/0.5;\n"
                             "	//	return b * l + g * (1.0 - l);\n"
                             "	//}\n"
                             "	\n"
                             "	if(value > 0.6)\n"
                             "		return r;\n"
                             "	else if(value < 0.4)\n"
                             "		return b;\n"
                             "	else \n"
                             "		return g;\n"
                             "}\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	mat4 modelview_matrix = view_matrix * model_matrix;\n"
                             "	vec4 world_position = modelview_matrix * vec4(ver_attribute_position, 1.0);\n"
                             "    gl_Position = projection_matrix *  world_position;\n"
                             "	\n"
                             "	view_direction  = normalize(vec3(-world_position));\n"
                             "    normal          = mat3(modelview_matrix) * ver_attribute_normal;\n"
                             "	color 			= harmonic_value(ver_harmonic_value);\n"
                             "}\n"
;
static const char* multipick430_frag = 
                             "#version 430 core\n"
                             "\n"
                             "out vec4 fragment_color;\n"
                             "\n"
                             "uniform uint mesh_id = 0;  \n"
                             "\n"
                             "void main( void )\n"
                             "{				\n"
                             "	uint primitive_id = gl_PrimitiveID + 1;\n"
                             "	\n"
                             "	uint a = primitive_id%256;\n"
                             "	uint b = (primitive_id/(1<<8))%256;\n"
                             "	uint g = (primitive_id/(1<<16))%256;\n"
                             "	uint r = mesh_id%256;\n"
                             "	vec4 color = vec4(float(r)/255.0, float(g)/255.0, float(b)/255.0, float(a)/255.0);\n"
                             "	\n"
                             "	fragment_color = color;\n"
                             "}\n"
;
static const char* multipick430_vert = 
                             "#version 430 core\n"
                             "\n"
                             "layout(location = 0) in vec3 ver_attribute_position;\n"
                             "\n"
                             "uniform mat4 model_matrix;\n"
                             "uniform mat4 view_matrix;\n"
                             "uniform mat4 projection_matrix;\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "    gl_Position = projection_matrix * view_matrix * model_matrix * vec4(ver_attribute_position, 1.0);\n"
                             "}\n"
;
static const char* odometer430_frag = 
                             "#version 430 core\n"
                             "\n"
                             "out vec4 fragment_color;\n"
                             "\n"
                             "in vec3 view_direction;\n"
                             "in vec3 normal;\n"
                             "uniform vec4 color = vec4(1.0, 1.0, 1.0, 1.0);\n"
                             "\n"
                             "uniform vec4 front_ambient = vec4(0.7, 0.7, 0.7, 1.0);\n"
                             "uniform vec4 front_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_ambient = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 specular = vec4(0.5, 0.5, 0.5, 1.0);\n"
                             "uniform float specular_power = 128.0;\n"
                             "uniform vec3 light_direction = vec3(0.0, 0.0, 1.0);\n"
                             "uniform float color_shading = 1.0;\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	vec4 core_color = color;\n"
                             "	vec3 flight_direction = normalize(light_direction);\n"
                             "	vec3 fnormal 		  =	normalize(normal);\n"
                             "	vec4 ambient_color 	  = front_ambient;\n"
                             "	vec4 diffuse_color    = front_diffuse;\n"
                             "	vec4 specular_color   = specular;\n"
                             "	\n"
                             "	if(!gl_FrontFacing)\n"
                             "	{\n"
                             "		fnormal.z  = - fnormal.z;\n"
                             "		ambient_color = back_ambient;\n"
                             "		diffuse_color = back_diffuse;\n"
                             "		specular_color = vec4(0.0, 0.0, 0.0, 1.0);\n"
                             "	    \n"
                             "		core_color = vec4(0.6, 0.6, 0.6, 1.0);\n"
                             "	}\n"
                             "	\n"
                             "	float NdotL 		  = dot(fnormal, flight_direction);\n"
                             "	ambient_color 		  = ambient_color * core_color;\n"
                             "	diffuse_color         = diffuse_color * core_color;\n"
                             "	vec3 freflection      = normalize(((2.0 * fnormal) * NdotL) - flight_direction);\n"
                             "	vec3 fview_direction  = normalize(view_direction);\n"
                             "	float RdotV           = max(0.0, dot(freflection, fview_direction)); \n"
                             "	vec4 total_diffuse    = NdotL * diffuse_color;\n"
                             "	vec4 total_specular   = specular_color * pow( RdotV, 70.0);\n"
                             "	core_color = ambient_color + total_diffuse + total_specular;\n"
                             "	fragment_color = vec4(core_color.rgb, color.a);\n"
                             "}\n"
;
static const char* odometer430_vert = 
                             "#version 430 core\n"
                             "\n"
                             "layout(location = 0) in vec3 ver_attribute_position;\n"
                             "layout(location = 1) in vec3 ver_attribute_normal;\n"
                             "\n"
                             "uniform mat4 model_matrix;\n"
                             "uniform mat4 view_matrix;\n"
                             "uniform mat4 projection_matrix;\n"
                             "\n"
                             "uniform mat4 align_matrix;\n"
                             "out vec3 view_direction;\n"
                             "out vec3 normal;\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	mat4 modelview_matrix = view_matrix * model_matrix * align_matrix;\n"
                             "	vec4 world_position = modelview_matrix * vec4(ver_attribute_position, 1.0);\n"
                             "    gl_Position = projection_matrix *  world_position;\n"
                             "	\n"
                             "	view_direction  = normalize(vec3(-world_position));\n"
                             "    normal          = mat3(modelview_matrix) * ver_attribute_normal;\n"
                             "}\n"
;
static const char* phong430_frag = 
                             "#version 430 core\n"
                             "\n"
                             "out vec4 fragment_color;\n"
                             "\n"
                             "in vec3 view_direction;\n"
                             "in vec3 normal;\n"
                             "in vec4 color;\n"
                             "\n"
                             "uniform vec4 front_ambient = vec4(0.7, 0.7, 0.7, 1.0);\n"
                             "uniform vec4 front_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_ambient = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 specular = vec4(0.5, 0.5, 0.5, 1.0);\n"
                             "uniform float specular_power = 128.0;\n"
                             "uniform vec3 light_direction = vec3(0.0, 0.0, 1.0);\n"
                             "uniform float color_shading = 1.0;\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	vec4 core_color = color;\n"
                             "	vec3 flight_direction = normalize(light_direction);\n"
                             "	vec3 fnormal 		  =	normalize(normal);\n"
                             "	vec4 ambient_color 	  = front_ambient;\n"
                             "	vec4 diffuse_color    = front_diffuse;\n"
                             "	vec4 specular_color   = specular;\n"
                             "	\n"
                             "	if(!gl_FrontFacing)\n"
                             "	{\n"
                             "		fnormal.z  = - fnormal.z;\n"
                             "		ambient_color = back_ambient;\n"
                             "		diffuse_color = back_diffuse;\n"
                             "		specular_color = vec4(0.0, 0.0, 0.0, 1.0);\n"
                             "	    \n"
                             "		core_color = vec4(0.6, 0.6, 0.6, 1.0);\n"
                             "	}\n"
                             "	else if (color_shading == 0.0) \n"
                             "	{\n"
                             "		core_color = vec4(1.0, 1.0, 1.0, 1.0);\n"
                             "		ambient_color = vec4(0.2, 0.2, 0.2, 1.0);\n"
                             "		diffuse_color = vec4(0.75, 0.75, 0.75, 1.0);\n"
                             "		specular_color *= 0.2;\n"
                             "	}\n"
                             "	\n"
                             "	float NdotL 		  = dot(fnormal, flight_direction);\n"
                             "	ambient_color 		  = ambient_color * core_color;\n"
                             "	diffuse_color         = diffuse_color * core_color;\n"
                             "	vec3 freflection      = normalize(((2.0 * fnormal) * NdotL) - flight_direction);\n"
                             "	vec3 fview_direction  = normalize(view_direction);\n"
                             "	float RdotV           = max(0.0, dot(freflection, fview_direction)); \n"
                             "	vec4 total_diffuse    = NdotL * diffuse_color;\n"
                             "	vec4 total_specular   = specular_color * pow( RdotV, 70.0);\n"
                             "	core_color = ambient_color + total_diffuse + total_specular;\n"
                             "	fragment_color = vec4(core_color.rgb, color.a);\n"
                             "}\n"
;
static const char* phong430_vert = 
                             "#version 430 core\n"
                             "\n"
                             "layout(location = 0) in vec3 ver_attribute_position;\n"
                             "layout(location = 1) in vec3 ver_attribute_normal;\n"
                             "layout(location = 2) in vec4 ver_attribute_color;\n"
                             "uniform mat4 model_matrix;\n"
                             "uniform mat4 view_matrix;\n"
                             "uniform mat4 projection_matrix;\n"
                             "\n"
                             "out vec3 view_direction;\n"
                             "out vec3 normal;\n"
                             "out vec4 color;\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	mat4 modelview_matrix = view_matrix * model_matrix;\n"
                             "	vec4 world_position = modelview_matrix * vec4(ver_attribute_position, 1.0);\n"
                             "    gl_Position = projection_matrix *  world_position;\n"
                             "	\n"
                             "	view_direction  = normalize(vec3(-world_position));\n"
                             "    normal          = mat3(modelview_matrix) * ver_attribute_normal;\n"
                             "	color 			= ver_attribute_color;\n"
                             "}\n"
;
static const char* pointphong430_frag = 
                             "#version 430 core\n"
                             "\n"
                             "out vec4 fragment_color;\n"
                             "\n"
                             "in vec3 view_direction;\n"
                             "in vec3 normal;\n"
                             "uniform vec4 color = vec4(1.0, 1.0, 1.0, 1.0);\n"
                             "\n"
                             "uniform vec4 front_ambient = vec4(0.7, 0.7, 0.7, 1.0);\n"
                             "uniform vec4 front_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_ambient = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 specular = vec4(0.5, 0.5, 0.5, 1.0);\n"
                             "uniform float specular_power = 128.0;\n"
                             "uniform vec3 light_direction = vec3(0.0, 0.0, 1.0);\n"
                             "uniform float color_shading = 1.0;\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	vec4 core_color = color;\n"
                             "	vec3 flight_direction = normalize(light_direction);\n"
                             "	vec3 fnormal 		  =	normalize(normal);\n"
                             "	vec4 ambient_color 	  = front_ambient;\n"
                             "	vec4 diffuse_color    = front_diffuse;\n"
                             "	vec4 specular_color   = specular;\n"
                             "	\n"
                             "	if(!gl_FrontFacing)\n"
                             "	{\n"
                             "		fnormal.z  = - fnormal.z;\n"
                             "		ambient_color = back_ambient;\n"
                             "		diffuse_color = back_diffuse;\n"
                             "		specular_color = vec4(0.0, 0.0, 0.0, 1.0);\n"
                             "	    \n"
                             "		core_color = vec4(0.6, 0.6, 0.6, 1.0);\n"
                             "	}\n"
                             "	else if (color_shading == 0.0) \n"
                             "	{\n"
                             "		core_color = vec4(1.0, 1.0, 1.0, 1.0);\n"
                             "		ambient_color = vec4(0.2, 0.2, 0.2, 1.0);\n"
                             "		diffuse_color = vec4(0.75, 0.75, 0.75, 1.0);\n"
                             "		specular_color *= 0.2;\n"
                             "	}\n"
                             "	\n"
                             "	float NdotL 		  = dot(fnormal, flight_direction);\n"
                             "	ambient_color 		  = ambient_color * core_color;\n"
                             "	diffuse_color         = diffuse_color * core_color;\n"
                             "	vec3 freflection      = normalize(((2.0 * fnormal) * NdotL) - flight_direction);\n"
                             "	vec3 fview_direction  = normalize(view_direction);\n"
                             "	float RdotV           = max(0.0, dot(freflection, fview_direction)); \n"
                             "	vec4 total_diffuse    = NdotL * diffuse_color;\n"
                             "	vec4 total_specular   = specular_color * pow( RdotV, 70.0);\n"
                             "	core_color = ambient_color + total_diffuse + total_specular;\n"
                             "	fragment_color = vec4(core_color.rgb, color.a);\n"
                             "}\n"
;
static const char* pointphong430_vert = 
                             "#version 430 core\n"
                             "\n"
                             "layout(location = 0) in vec3 ver_attribute_position;\n"
                             "layout(location = 1) in vec3 ver_attribute_normal;\n"
                             "\n"
                             "uniform mat4 model_matrix;\n"
                             "uniform mat4 view_matrix;\n"
                             "uniform mat4 projection_matrix;\n"
                             "\n"
                             "out vec3 view_direction;\n"
                             "out vec3 normal;\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	mat4 modelview_matrix = view_matrix * model_matrix;\n"
                             "	vec4 world_position = modelview_matrix * vec4(ver_attribute_position, 1.0);\n"
                             "    gl_Position = projection_matrix *  world_position;\n"
                             "	\n"
                             "	view_direction  = normalize(vec3(-world_position));\n"
                             "    normal          = mat3(modelview_matrix) * ver_attribute_normal;\n"
                             "}\n"
;
static const char* point_segment430_frag = 
                             "#version 430 core\n"
                             "\n"
                             "out vec4 fragment_color;\n"
                             "\n"
                             "in vec3 view_direction;\n"
                             "in vec3 normal;\n"
                             "in vec4 color;\n"
                             "\n"
                             "uniform vec4 front_ambient = vec4(0.7, 0.7, 0.7, 1.0);\n"
                             "uniform vec4 front_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_ambient = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 specular = vec4(0.5, 0.5, 0.5, 1.0);\n"
                             "uniform float specular_power = 128.0;\n"
                             "uniform vec3 light_direction = vec3(0.0, 0.0, 1.0);\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	vec4 core_color = color;\n"
                             "	vec3 flight_direction = normalize(light_direction);\n"
                             "	vec3 fnormal 		  =	normalize(normal);\n"
                             "	vec4 ambient_color 	  = front_ambient;\n"
                             "	vec4 diffuse_color    = front_diffuse;\n"
                             "	vec4 specular_color   = specular;\n"
                             "	\n"
                             "	if(!gl_FrontFacing)\n"
                             "	{\n"
                             "		fnormal.z  = - fnormal.z;\n"
                             "		ambient_color = back_ambient;\n"
                             "		diffuse_color = back_diffuse;\n"
                             "		specular_color = vec4(0.0, 0.0, 0.0, 1.0);\n"
                             "	    \n"
                             "		core_color = vec4(0.6, 0.6, 0.6, 1.0);\n"
                             "	}\n"
                             "	\n"
                             "	float NdotL 		  = dot(fnormal, flight_direction);\n"
                             "	ambient_color 		  = ambient_color * core_color;\n"
                             "	diffuse_color         = diffuse_color * core_color;\n"
                             "	vec3 freflection      = normalize(((2.0 * fnormal) * NdotL) - flight_direction);\n"
                             "	vec3 fview_direction  = normalize(view_direction);\n"
                             "	float RdotV           = max(0.0, dot(freflection, fview_direction)); \n"
                             "	vec4 total_diffuse    = NdotL * diffuse_color;\n"
                             "	vec4 total_specular   = specular_color * pow( RdotV, 70.0);\n"
                             "	core_color = ambient_color + total_diffuse + total_specular;\n"
                             "	fragment_color = vec4(core_color.rgb, color.a);\n"
                             "}\n"
;
static const char* point_segment430_vert = 
                             "#version 430 core\n"
                             "\n"
                             "layout(location = 0) in vec3 ver_attribute_position;\n"
                             "layout(location = 1) in vec3 ver_attribute_normal;\n"
                             "layout(location = 2) in float ver_attribute_flag;\n"
                             "\n"
                             "uniform mat4 model_matrix;\n"
                             "uniform mat4 view_matrix;\n"
                             "uniform mat4 projection_matrix;\n"
                             "\n"
                             "out vec3 view_direction;\n"
                             "out vec3 normal;\n"
                             "out vec4 color;\n"
                             "\n"
                             "vec4 flag2color(float value)\n"
                             "{\n"
                             "	if(value == 1.0)\n"
                             "		return vec4(0.0, 1.0, 0.0, 1.0);\n"
                             "	else if(value == 2.0)\n"
                             "		return vec4(1.0, 0.0, 0.0, 1.0);\n"
                             "	else if(value == 3.0)\n"
                             "		return vec4(1.0, 1.0, 0.0, 1.0);\n"
                             "	else if(value == 4.0)\n"
                             "		return vec4(1.0, 0.0, 1.0, 1.0);\n"
                             "	else if(value == 5.0)\n"
                             "		return vec4(0.0, 0.0, 1.0, 1.0);\n"
                             "	else if(value == 6.0)\n"
                             "		return vec4(0.0, 1.0, 0.5, 1.0);\n"
                             "	else if(value == 7.0)\n"
                             "		return vec4(1.0, 0.0, 0.4, 1.0);\n"
                             "	else if(value == 8.0)\n"
                             "		return vec4(0.4, 0.4, 0.7, 1.0);\n"
                             "	else if(value == 9.0)\n"
                             "		return vec4(1.0, 0.9, 0.3, 1.0);\n"
                             "	else if(value == 10.0)\n"
                             "		return vec4(0.4, 0.8, 1.0, 1.0);	\n"
                             "	return vec4(1.0, 1.0, 1.0, 1.0);\n"
                             "}\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	mat4 modelview_matrix = view_matrix * model_matrix;\n"
                             "	vec4 world_position = modelview_matrix * vec4(ver_attribute_position, 1.0);\n"
                             "    gl_Position = projection_matrix *  world_position;\n"
                             "	\n"
                             "	view_direction  = normalize(vec3(-world_position));\n"
                             "    normal          = mat3(modelview_matrix) * ver_attribute_normal;\n"
                             "	\n"
                             "	color = flag2color(ver_attribute_flag);\n"
                             "}\n"
;
static const char* purecolor430_frag = 
                             "#version 430 core\n"
                             "\n"
                             "out vec4 fragment_color;\n"
                             "\n"
                             "uniform vec4 color;\n"
                             "\n"
                             "void main()\n"
                             "{\n"
                             "	fragment_color = color;\n"
                             "}\n"
;
static const char* purecolor430_vert = 
                             "#version 430 core\n"
                             "\n"
                             "layout(location = 0) in vec3 ver_attribute_position;\n"
                             "\n"
                             "uniform mat4 model_matrix;\n"
                             "uniform mat4 view_matrix;\n"
                             "uniform mat4 projection_matrix;\n"
                             "\n"
                             "out vec4 ocolor;\n"
                             "void main()\n"
                             "{\n"
                             "	gl_Position = projection_matrix * view_matrix * model_matrix * vec4(ver_attribute_position, 1.0);\n"
                             "}\n"
;
static const char* seg430_frag = 
                             "#version 430 core\n"
                             "\n"
                             "out vec4 fragment_color;\n"
                             "\n"
                             "in vec3 view_direction;\n"
                             "in vec3 normal;\n"
                             "in vec4 color;\n"
                             "\n"
                             "uniform vec4 front_ambient = vec4(0.7, 0.7, 0.7, 1.0);\n"
                             "uniform vec4 front_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_ambient = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 specular = vec4(0.5, 0.5, 0.5, 1.0);\n"
                             "uniform float specular_power = 128.0;\n"
                             "uniform vec3 light_direction = vec3(0.0, 0.0, 1.0);\n"
                             "uniform float color_shading = 1.0;\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	vec4 core_color = color;\n"
                             "	vec3 flight_direction = normalize(light_direction);\n"
                             "	vec3 fnormal 		  =	normalize(normal);\n"
                             "	vec4 ambient_color 	  = front_ambient;\n"
                             "	vec4 diffuse_color    = front_diffuse;\n"
                             "	vec4 specular_color   = specular;\n"
                             "	\n"
                             "	if(!gl_FrontFacing)\n"
                             "	{\n"
                             "		fnormal.z  = - fnormal.z;\n"
                             "		ambient_color = back_ambient;\n"
                             "		diffuse_color = back_diffuse;\n"
                             "		specular_color = vec4(0.0, 0.0, 0.0, 1.0);\n"
                             "	    \n"
                             "		core_color = vec4(0.6, 0.6, 0.6, 1.0);\n"
                             "	}\n"
                             "	else if (color_shading == 0.0) \n"
                             "	{\n"
                             "		core_color = vec4(1.0, 1.0, 1.0, 1.0);\n"
                             "		ambient_color = vec4(0.2, 0.2, 0.2, 1.0);\n"
                             "		diffuse_color = vec4(0.75, 0.75, 0.75, 1.0);\n"
                             "		specular_color *= 0.2;\n"
                             "	}\n"
                             "	\n"
                             "	float NdotL 		  = dot(fnormal, flight_direction);\n"
                             "	ambient_color 		  = ambient_color * core_color;\n"
                             "	diffuse_color         = diffuse_color * core_color;\n"
                             "	vec3 freflection      = normalize(((2.0 * fnormal) * NdotL) - flight_direction);\n"
                             "	vec3 fview_direction  = normalize(view_direction);\n"
                             "	float RdotV           = max(0.0, dot(freflection, fview_direction)); \n"
                             "	vec4 total_diffuse    = NdotL * diffuse_color;\n"
                             "	vec4 total_specular   = specular_color * pow( RdotV, 70.0);\n"
                             "	core_color = ambient_color + total_diffuse + total_specular;\n"
                             "	fragment_color = vec4(core_color.rgb, color.a);\n"
                             "}\n"
;
static const char* seg430_vert = 
                             "#version 430 core\n"
                             "\n"
                             "layout(location = 0) in vec3 ver_attribute_position;\n"
                             "layout(location = 1) in vec3 ver_attribute_normal;\n"
                             "layout(location = 2) in float ver_attribute;\n"
                             "\n"
                             "uniform mat4 model_matrix;\n"
                             "uniform mat4 view_matrix;\n"
                             "uniform mat4 projection_matrix;\n"
                             "uniform uint branch;\n"
                             "\n"
                             "out vec3 view_direction;\n"
                             "out vec3 normal;\n"
                             "out vec4 color;\n"
                             "\n"
                             "vec4 visual_curvature(float value)\n"
                             "{\n"
                             "	if(value < -1.0)\n"
                             "		return vec4(1.0, 0.0, 0.0, 1.0);\n"
                             "	else if(value > 1.0)\n"
                             "		return vec4(0.0, 0.0, 1.0, 1.0);\n"
                             "	return vec4(0.0, 1.0, 0.0f, 1.0);\n"
                             "}\n"
                             "\n"
                             "vec4 visual_distance(float value)\n"
                             "{\n"
                             "	return vec4(0.0, abs(value)/15.0, 0.0f, 1.0);\n"
                             "}\n"
                             "\n"
                             "vec4 visual_color(float value)\n"
                             "{\n"
                             "	if(branch == 0)\n"
                             "		return vec4(1.0, 1.0, 1.0, 1.0);\n"
                             "	else if(branch == 1)\n"
                             "		return visual_curvature(value);\n"
                             "	else if(branch == 2)\n"
                             "		return visual_distance(value);\n"
                             "	else\n"
                             "		return vec4(1.0, 1.0, 1.0, 1.0);\n"
                             "}\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	mat4 modelview_matrix = view_matrix * model_matrix;\n"
                             "	vec4 world_position = modelview_matrix * vec4(ver_attribute_position, 1.0);\n"
                             "    gl_Position = projection_matrix *  world_position;\n"
                             "	\n"
                             "	view_direction  = normalize(vec3(-world_position));\n"
                             "    normal          = mat3(modelview_matrix) * ver_attribute_normal;\n"
                             "	\n"
                             "	color = visual_color(ver_attribute);\n"
                             "}\n"
;
static const char* testicp430_frag = 
                             "#version 430 core\n"
                             "\n"
                             "out vec4 fragment_color;\n"
                             "\n"
                             "in vec3 view_direction;\n"
                             "in vec3 normal;\n"
                             "uniform vec4 color = vec4(1.0, 1.0, 1.0, 1.0);\n"
                             "\n"
                             "uniform vec4 front_ambient = vec4(0.7, 0.7, 0.7, 1.0);\n"
                             "uniform vec4 front_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_ambient = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 back_diffuse = vec4(0.3, 0.3, 0.3, 1.0);\n"
                             "uniform vec4 specular = vec4(0.5, 0.5, 0.5, 1.0);\n"
                             "uniform float specular_power = 128.0;\n"
                             "uniform vec3 light_direction = vec3(0.0, 0.0, 1.0);\n"
                             "uniform float color_shading = 1.0;\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	vec4 core_color = color;\n"
                             "	vec3 flight_direction = normalize(light_direction);\n"
                             "	vec3 fnormal 		  =	normalize(normal);\n"
                             "	vec4 ambient_color 	  = front_ambient;\n"
                             "	vec4 diffuse_color    = front_diffuse;\n"
                             "	vec4 specular_color   = specular;\n"
                             "	\n"
                             "	if(!gl_FrontFacing)\n"
                             "	{\n"
                             "		fnormal.z  = - fnormal.z;\n"
                             "		ambient_color = back_ambient;\n"
                             "		diffuse_color = back_diffuse;\n"
                             "		specular_color = vec4(0.0, 0.0, 0.0, 1.0);\n"
                             "	    \n"
                             "		core_color = vec4(0.6, 0.6, 0.6, 1.0);\n"
                             "	}\n"
                             "	else if (color_shading == 0.0) \n"
                             "	{\n"
                             "		core_color = vec4(1.0, 1.0, 1.0, 1.0);\n"
                             "		ambient_color = vec4(0.2, 0.2, 0.2, 1.0);\n"
                             "		diffuse_color = vec4(0.75, 0.75, 0.75, 1.0);\n"
                             "		specular_color *= 0.2;\n"
                             "	}\n"
                             "	\n"
                             "	float NdotL 		  = dot(fnormal, flight_direction);\n"
                             "	ambient_color 		  = ambient_color * core_color;\n"
                             "	diffuse_color         = diffuse_color * core_color;\n"
                             "	vec3 freflection      = normalize(((2.0 * fnormal) * NdotL) - flight_direction);\n"
                             "	vec3 fview_direction  = normalize(view_direction);\n"
                             "	float RdotV           = max(0.0, dot(freflection, fview_direction)); \n"
                             "	vec4 total_diffuse    = NdotL * diffuse_color;\n"
                             "	vec4 total_specular   = specular_color * pow( RdotV, 70.0);\n"
                             "	core_color = ambient_color + total_diffuse + total_specular;\n"
                             "	fragment_color = vec4(core_color.rgb, color.a);\n"
                             "}\n"
;
static const char* testicp430_vert = 
                             "#version 430 core\n"
                             "\n"
                             "layout(location = 0) in vec3 ver_attribute_position;\n"
                             "layout(location = 1) in vec3 ver_attribute_normal;\n"
                             "\n"
                             "uniform mat4 model_matrix;\n"
                             "uniform mat4 view_matrix;\n"
                             "uniform mat4 projection_matrix;\n"
                             "uniform mat4 align_matrix;\n"
                             "\n"
                             "out vec3 view_direction;\n"
                             "out vec3 normal;\n"
                             "\n"
                             "void main( void )\n"
                             "{\n"
                             "	mat4 modelview_matrix = view_matrix * model_matrix * align_matrix;\n"
                             "	vec4 world_position = modelview_matrix * vec4(ver_attribute_position, 1.0);\n"
                             "    gl_Position = projection_matrix *  world_position;\n"
                             "	\n"
                             "	view_direction  = normalize(vec3(-world_position));\n"
                             "    normal          = mat3(modelview_matrix) * ver_attribute_normal;\n"
                             "}\n"
;
